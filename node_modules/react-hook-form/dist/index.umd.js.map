{"version":3,"file":"index.umd.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/cloneObject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isFunction.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/Subject.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import * as React from 'react';\n\nimport { SubjectType, TearDown } from './utils/Subject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject?: SubjectType<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>({ disabled, subject, callback }: Props<T>) {\n  const _subscription = React.useRef(subject);\n  const _unSubscribe = React.useRef<{ unsubscribe: TearDown }>();\n\n  if (disabled) {\n    if (_subscription.current) {\n      _unSubscribe.current && _unSubscribe.current.unsubscribe();\n      _subscription.current = _unSubscribe.current = undefined;\n    }\n  } else {\n    if (!_subscription.current) {\n      _subscription.current = subject;\n    }\n\n    if (!_unSubscribe.current && _subscription.current) {\n      _unSubscribe.current = _subscription.current.subscribe({\n        next: callback,\n      });\n    }\n  }\n\n  React.useEffect(\n    () => () => {\n      _unSubscribe.current && _unSubscribe.current.unsubscribe();\n    },\n    [],\n  );\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport {\n  FieldValues,\n  Path,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      (!_name.current ||\n        !formState.name ||\n        convertToArrayPayload(_name.current).includes(\n          formState.name as Path<TFieldValues>,\n        )) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, name)),\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options?: FieldArrayMethodProps,\n): string =>\n  options && !options.shouldFocus\n    ? options.focusName || `${name}.${options.focusIndex}.`\n    : `${name}.${index}.`;\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: () => void;\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  RegisterOptions,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport omitKey from '../utils/omitKeys';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let formOptions = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _delayCallback: DelayCallback;\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _formValues = formOptions.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _timer = 0;\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let _validateCount: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationMode = getValidationModes(formOptions.mode);\n  const reValidateMode = getValidationModes(formOptions.reValidateMode);\n  const isValidateAllFieldCriteria =\n    formOptions.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(_timer);\n      _timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    _names.watchAll ||\n    _names.watch.has(name) ||\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      _delayCallback =\n        _delayCallback || debounce(updateErrorState, props.delayError);\n\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousError, error) : previousError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    _validateCount[name]--;\n\n    if (_proxyFormState.isValidating && !_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      _validateCount = {};\n    }\n  };\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n\n        fieldValue =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!fieldValue);\n          } else {\n            _f.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n\n        if (shouldRender) {\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const updateTouchAndDirtyState = (\n    name: InternalFieldName,\n    inputValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    let isChanged = false;\n\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(\n        get(_defaultValues, name),\n        inputValue,\n      );\n      isCurrentFieldDirty\n        ? set(_formState.dirtyFields as TFieldValues, name, true)\n        : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged =\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged =\n        isChanged ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isChanged && shouldRender && _subjects.state.next(state);\n\n    return isChanged ? state : {};\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) => {\n    return formOptions.resolver\n      ? await formOptions.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          formOptions.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            formOptions.criteriaMode,\n            formOptions.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n  };\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const validateForm = async (\n    _fields: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n\n      if (field) {\n        const _f = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldCheckValid) {\n            fieldError[_f.name]\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name);\n          }\n        }\n\n        fieldValue &&\n          (await validateForm(fieldValue, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const inputValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n\n      if (isBlurEvent && field._f.onBlur) {\n        field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !formOptions.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          reValidateMode,\n          validationMode,\n        );\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n\n      set(_formValues, name, inputValue);\n\n      const fieldState = updateTouchAndDirtyState(\n        name,\n        inputValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (formOptions.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      if (field._f.deps) {\n        trigger(field._f.deps as FieldPath<TFieldValues>[]);\n      }\n\n      shouldRenderBaseOnError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const _updateValidAndInputValue = (\n    name: InternalFieldName,\n    shouldSkipValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const defaultValue = isUndefined(fieldValue)\n        ? get(_defaultValues, name)\n        : fieldValue;\n\n      if (\n        isUndefined(defaultValue) ||\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\n        shouldSkipValueAs\n      ) {\n        set(\n          _formValues,\n          name,\n          shouldSkipValueAs ? defaultValue : getFieldValue(field._f),\n        );\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const _getIsDirty: GetIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n\n    return !deepEqual({ ...getValues() }, _defaultValues);\n  };\n\n  const _updateValid = async (skipRender?: boolean) => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = formOptions.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await validateForm(_fields, true);\n\n      if (!skipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n    return isValid;\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) =>\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n          )\n        : setFieldValue(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n            true,\n          );\n    });\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    fieldNames,\n    defaultValue,\n    isMounted,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(isMounted || _stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(fieldNames)\n        ? { [fieldNames]: defaultValue }\n        : defaultValue),\n    };\n\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\n      result.push(get(fieldValues, fieldName as InternalFieldName));\n    }\n\n    return Array.isArray(fieldNames) ? result : result[0];\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    keyName,\n    name,\n    method,\n    args,\n    values = [],\n    shouldSet = true,\n    shouldSetFields = true,\n  ) => {\n    let output;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(_formState.touchedFields as TFieldValues, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(\n        _formState.dirtyFields as TFieldValues,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(values, keyName),\n          get(_defaultValues, name, []),\n          get(_formState.dirtyFields, name, []),\n        ),\n      );\n      values &&\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(values, keyName),\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(values, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const _getFieldArrayValue = (name: InternalFieldName) =>\n    get(_stateFlags.mount ? _formValues : _defaultValues, name, []);\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n    let isValid;\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n      isValid = name\n        ? fieldNames.every((name) => !get(schemaResult, name))\n        : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (\n          await Promise.all(\n            fieldNames.map(async (fieldName) => {\n              const field = get(_fields, fieldName);\n              return await validateForm(\n                field && field._f ? { [fieldName]: field } : field,\n              );\n            }),\n          )\n        ).every(Boolean);\n\n        _updateValid();\n      } else {\n        isValid = await validateForm(_fields);\n      }\n    }\n\n    _subjects.state.next({\n      ...(isString(name) ? { name } : {}),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n    }\n\n    return isValid;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            fieldName(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          false,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n\n      if (get(_fields, inputName)) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, inputName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    fieldRef: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field: Field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value)\n      ? fieldRef.querySelectorAll\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\n          fieldRef\n        : fieldRef\n      : fieldRef;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(_fields, name, field);\n\n    (!options || !options.disabled) &&\n      _updateValidAndInputValue(name, false, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (!isUndefined(options.value)) {\n      set(_formValues, name, options.value);\n    }\n\n    if (field && isBoolean(options.disabled)) {\n      set(\n        _formValues,\n        name,\n        options.disabled\n          ? undefined\n          : get(_formValues, name, getFieldValue(field._f)),\n      );\n    }\n\n    !field && _updateValidAndInputValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              registerFieldRef(name, ref, options);\n            } else {\n              const field = get(_fields, name, {}) as Field;\n              const _shouldUnregister =\n                formOptions.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              _shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (formOptions.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await validateForm(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          formOptions.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepValues) {\n      _formValues = props.shouldUnregister ? {} : values;\n    }\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name) as Field;\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      _updateProps: (options) => {\n        formOptions = { ...defaultOptions, ...options };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArrayValue(name), keyName));\n  const _fieldIds = React.useRef(fields);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === name || !fieldArrayName) {\n        setFields(mapIds(get(values, name), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      keyName,\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      keyName,\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      keyName,\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      keyName,\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeFields();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: ({ name }) => {\n      if (\n        !_name.current ||\n        !name ||\n        convertToArrayPayload(_name.current).some(\n          (currentName) =>\n            name &&\n            currentName &&\n            (name.startsWith(currentName as InternalFieldName) ||\n              currentName.startsWith(name as InternalFieldName)),\n        )\n      ) {\n        const result = control._getWatch(\n          _name.current as InternalFieldName,\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n        updateValue(\n          isObject(result)\n            ? { ...result }\n            : Array.isArray(result)\n            ? [...result]\n            : result,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeFields();\n  });\n\n  return value;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","useSubscribe","disabled","subject","callback","_subscription","useRef","_unSubscribe","unsubscribe","subscribe","next","useEffect","useFormState","props","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","convertToArrayPayload","includes","shouldRenderFormState","_subjects","state","getProxyFormState","useController","shouldUnregister","setInputStateValue","_formValues","_defaultValues","values","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","_shouldUnregisterField","_shouldUnregister","isNameInFieldArray","_names","array","_stateFlags","action","unregister","onChange","event","target","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","map","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","fieldValues","cloneObject","Set","deepEqual","object1","object2","isPrimitive","keys1","keys2","val1","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","isString","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","_delayCallback","formOptions","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","watch","_timer","unMount","_validateCount","validationMode","getValidationModes","isValidateAllFieldCriteria","criteriaMode","isFieldWatched","watchAll","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","previousError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","setFieldValue","shouldRender","fieldValue","isWeb","forEach","selectRef","checkboxRef","radioRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isPreviousFieldTouched","executeResolver","resolver","context","getResolverOptions","validateForm","shouldCheckValid","valid","fieldError","validateField","handleChange","isBlurEvent","shouldSkipValidation","deps","skipValidation","isWatched","parentNodeName","parentField","parentError","_updateValid","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","getValues","skipRender","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isMounted","isGlobal","schemaResult","executeResolverValidation","Promise","all","inputName","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","_removeFields","live","_updateFieldArray","method","shouldSet","shouldSetFields","argA","argB","unsetEmptyArray","setFieldArrayDirtyFields","omitKey","_getFieldArrayValue","_updateProps","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","setValue","isFieldArray","reset","formValues","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","clearErrors","setError","setFocus","render","Provider","children","setFields","mapIds","fieldArrayName","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","watchField","startsWith","swap","mapCurrentIds","swapArrayAt","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl","currentName","updateValue"],"mappings":"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"}